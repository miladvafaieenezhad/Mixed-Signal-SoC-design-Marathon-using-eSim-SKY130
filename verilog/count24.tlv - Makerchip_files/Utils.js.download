(function(){var $,Logging,Promise,Utils;[Logging,$,Promise,Utils]=[];Utils={};Utils.assert=function(cond,message){var msg;if(!cond){msg=!message?"Failed assertion.":typeof message==="string"?message:message();if(!window.assertionFlag){alert(msg);window.assertionFlag=true;}
debugger;}
return null;};Utils.extend=function(klass,mixin,silent,mixin_overrides){var method,name,override_mixin,proto,ref,ref1,results;proto=klass.prototype;results=[];for(name in mixin){method=mixin[name];if(proto[name]){override_mixin=false;if(mixin_overrides===true||(mixin_overrides!=null?mixin_overrides[name]:void 0)){override_mixin=true;proto[name]=method;}
if(silent!==true&&!(silent!=null?silent[name]:void 0)){results.push(console.log(`While applying ${((ref=mixin.constructor)!=null?ref.name:void 0)||"an object"} as a mixin to ${((ref1=klass.constructor)!=null?ref1.name:void 0)||"an object"}`+`, member \"${name}\" conflicts. Mixin's member is ${override_mixin?"used":"dropped"}.`));}else{results.push(void 0);}}else{results.push(proto[name]=method);}}
return results;};Utils.abstractMethod=function(){return Utils.unusedCode("Abstract method has no definition.");};Utils.unusedCode=function(){return Utils.report("Reached code that was supposed to be unused.");};Utils.unwrittenCode=function(){return Utils.report("Reached unwritten code.");};Utils.reportTime=function(tag){var delta,ms,str;ms=new Date().getTime();str=`Time: ${ms}`;if(window.lastReportTime!=null){delta=ms-window.lastReportTime;str=`Elapsed: ${delta}, ${str}`;}
str=`${str} | (${tag})`;console.log(str);return window.lastReportTime=ms;};Utils.report=function(msg){console.log(msg);return console.trace();};Utils.deepMerge=function(target,...sources){var i,key,len,results,source;if(!sources.length){return target;}
source=sources.shift();if(isObject(target)&&isObject(source)){results=[];for(i=0,len=source.length;i<len;i++){key=source[i];if(isObject(source[key])){if(!target[key]){Object.assign(target,{[key]:{}});}
results.push(deepMerge(target[key],source[key]));}else{results.push(Object.assign(target,{[key]:source[key]}));}}
return results;}};Utils.$one=function(sel,context){var els;els=$(sel,context);Utils.assert(els.length===1,function(){return `\"${sel}\" matched ${els.length} elements.`;});return els;};Utils.node=function(sel,context){var els;els=$(sel,context);Utils.assert(els.length===1,function(){return `\"${sel}\" matched ${els.length} elements.`;});return els[0];};define("Utils",function(require,exports,module){Logging=require("Logging");Promise=require("bluebird");$=require("jquery");return Utils;});}).call(this);