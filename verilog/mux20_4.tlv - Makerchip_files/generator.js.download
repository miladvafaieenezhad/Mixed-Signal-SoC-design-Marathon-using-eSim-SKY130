(function(){var $,SignalValue,Utils,Variable,WaveformGenerator,appendHexChunk,isNumber,valToBin,valToHex,valToHexChunks,valToHexRemainder;[$,SignalValue,Variable,Utils]=[];WaveformGenerator=(function(){class WaveformGenerator{constructor(pane,waveData,path){this.drawBitSignal=this.drawBitSignal.bind(this);this.drawBusSignal=this.drawBusSignal.bind(this);this.pane=pane;this.path=path;this.isChrome=navigator.userAgent.search("Chrome")>-1;this.isFirefox=navigator.userAgent.search("Firefox")>-1;this.currentStart=waveData.getStartCycle();this.currentEnd=waveData.getEndViewerCycle();this.textRegionWidth=0;this.cyclesPerPixel=0;this.svgHeight=0;this.waveData=waveData;this.timescale={number:1,unit:"whocares"};this.initializeCurrentSigs();this.numVisible=0;}
setCursorEl(cursorElName,cyc){var lineHeight,position;position=Math.round((cyc-this.currentStart)/this.cyclesPerPixel+this.textRegionWidth);lineHeight=this.svgHeight;$(`.${cursorElName}`).html(`<line x1=\"${position}\" y1=\"0\" x2=\"${position}\" y2=\"${lineHeight}\"></line>`);return $(`.${cursorElName}Ruler`).html('<line x1="'+`${position}`+'" y1="0" x2="'+`${position}`+'" y2="20"></line>');}
setLineByCycle(cyc){var el,hex,i,j,len1,ref,sig,v,valid,value;if(cyc<this.currentStart||cyc>this.currentEnd){$(".verticalLine").html("");$(".verticalLineRuler").html("");}else{this.setCursorEl("verticalLine",cyc);}
i=0;ref=this.rows;for(j=0,len1=ref.length;j<len1;j++){value=ref[j];if(!value.visible){continue;}
if(value.type==="wire"){sig=this.waveData.getSignalByName(value.key);if(sig){[v,valid]=sig.getValueAndValidAtCycle(cyc);if(typeof v==="string"){hex=valToHex(v);el=$(`#value_${i}`);el.attr("mc-valid",`${valid}`);el.html(`<title>${hex}</title>${this.shortenText(hex,this.CHARS_IN_VALUE_REGION*this.CHARACTER_WIDTH)}`);}else{Utils.assert(false,`Waveform viewer bug. Couldn't find value of signal ${value.key} at cycle ${cyc}.`);}}else{Utils.assert(false,`Waveform viewer bug. Signal ${value.key} could not be found.`);}}
i++;}
return this.lineCycle=cyc;}
setVizCursorCycle(cyc){if(cyc===null||cyc<this.currentStart||cyc>this.currentEnd){$(".vizCursor").html("");return $(".vizCursorRuler").html("");}else{return this.setCursorEl("vizCursor",cyc);}}
setLineBySignalCycle(signal,cyc){var s,sv;s=this.waveData.getSignalByName(signal);sv=new SignalValue(s,cyc);return this.setLineByCycle(sv.getTransitionCycle());}
setLineByPosition(pos){return this.setLineByCycle(Math.round((pos-this.textRegionWidth)*this.cyclesPerPixel+this.currentStart));}
zoomIn(){var focalCyc,ref;focalCyc=(this.lineCycle!=null)&&((this.currentStart<=(ref=this.lineCycle)&&ref<=this.currentEnd))?this.lineCycle:(this.currentStart+this.currentEnd)/2;return this.generateWave((this.currentStart+focalCyc)/2,(focalCyc+this.currentEnd)/2);}
zoomOut(){var f,half,maxEnd,maxStart,newEnd,newStart,newWidth,width;width=this.currentEnd-this.currentStart;maxStart=this.waveData.getStartCycle();maxEnd=this.waveData.getEndViewerCycle();newWidth=2*width;if(newWidth>=maxEnd-maxStart){return this.generateWave();}else{half=width/2;newStart=this.currentStart-half;if(newStart<maxStart){newStart=maxStart;}
f=newEnd=this.currentEnd+half;if(newEnd>maxEnd){newEnd=maxEnd;newStart=newEnd-newWidth;}
return this.generateWave(newStart,newEnd);}}
zoomFull(){return this.generateWave();}
moveLeft(){var maxStart,newStart,quarter,width;width=this.currentEnd-this.currentStart;maxStart=this.waveData.getStartCycle();quarter=Math.ceil(width/4);newStart=this.currentStart-quarter;if(newStart<maxStart){newStart=maxStart;}
return this.generateWave(newStart,newStart+width);}
moveRight(){var end,maxEnd,quarter,width;width=this.currentEnd-this.currentStart;maxEnd=this.waveData.getEndViewerCycle();quarter=Math.ceil(width/4);end=this.currentEnd+quarter;if(end>maxEnd){end=maxEnd;}
return this.generateWave(end-width,end);}
initializeCurrentSigsGuts(indentation_str,scope){var child,childLi,fullScope,fullScopePrefix,li,liPrefix,name,obj,ports,ref,ref1,results,sig;li=fullScope=scope.getFullScope();if(li.startsWith(Variable.tlvTopScopeName)){li=li.substring(Variable.tlvTopScopeName.length);}
liPrefix=li+((li==="")||scope.isTlv?"":".");fullScopePrefix=fullScope+((fullScope==="")||scope.isTlv?"":".");ref=scope.sigs;for(name in ref){sig=ref[name];ports=sig.ports!=null?sig.ports:"";obj={key:sig.fullName,signal:sig,scope:fullScope,name:sig.fullName+ports,notFullName:sig.notFullName,ports:ports,visible:true,type:sig.type,width:sig.width,data:sig.data,svg:"",cycle:sig.cycle};this.rows.push(obj);}
ref1=scope.children;results=[];for(name in ref1){child=ref1[name];childLi=liPrefix+name;if(childLi===""){childLi="TLV";}
obj={key:childLi,scope:fullScopePrefix+name,name:indentation_str+name,li:childLi,type:"SCOPE",visible:true,expanded:true};this.rows.push(obj);results.push(this.initializeCurrentSigsGuts(indentation_str+"  ",child));}
return results;}
initializeCurrentSigs(){var top;this.rows=[];top=this.waveData.sigHier;return this.initializeCurrentSigsGuts("",top);}
expandScope(li){var currentScope,inScope,j,l,len1,ogScope,outOfScope,overHidden,ref,ref1,results,signal,visArr,x;inScope=false;ogScope=[];currentScope=[];visArr=[];overHidden=false;ref=this.rows;results=[];for(j=0,len1=ref.length;j<len1;j++){signal=ref[j];if(signal.type==="SCOPE"){if(outOfScope=inScope&&signal.visible){break;}
if(!inScope&&signal.li===li){inScope=true;signal.expanded=true;ogScope=currentScope=signal.scope.split(/[\/|>\.]/g);for(x=l=0,ref1=ogScope.length;(0<=ref1?l<ref1:l>ref1);x=0<=ref1?++l:--l){visArr.push(true);}
continue;}
if(inScope){results.push([overHidden,visArr,currentScope]=this.helpExpandScope(signal,overHidden,visArr,currentScope));}else{results.push(void 0);}}else if(inScope&&!overHidden){results.push(signal.visible=true);}else{results.push(void 0);}}
return results;}
helpExpandScope(signal,overHidden,visArr,currentScope){var i,j,last,ref,tempScope;tempScope=signal.scope.split(/[\/|>\.]/g);last=0;for(i=j=0,ref=Math.min(tempScope.length,currentScope.length);(0<=ref?j<ref:j>ref);i=0<=ref?++j:--j){if(tempScope[i]===currentScope[i]){last=i;}}
visArr=visArr.slice(0,+last+1||9e9);if(visArr[visArr.length-1]){overHidden=!signal.expanded;signal.visible=true;visArr.push(signal.expanded);}else{overHidden=true;}
currentScope=tempScope;return[overHidden,visArr,currentScope];}
expandAllScopes(){var j,len1,ref,signal;ref=this.rows;for(j=0,len1=ref.length;j<len1;j++){signal=ref[j];if(signal.type==="SCOPE"){signal.expanded=true;}
signal.visible=true;}
return true;}
collapseAllScopes(){var index,j,len1,ref,signal;index=0;ref=this.rows;for(j=0,len1=ref.length;j<len1;j++){signal=ref[j];if(signal.type==="SCOPE"){signal.expanded=false;signal.visible=signal.name===signal.scope;}else{signal.visible=signal.scope==="";}
index++;}
return true;}
collapseScope(li){var fullScope,inScope,j,len1,ref,results,signal,word_char_re;inScope=false;fullScope="";word_char_re=/^[a-zA-Z0-9_]$/;ref=this.rows;results=[];for(j=0,len1=ref.length;j<len1;j++){signal=ref[j];if(signal.type==="SCOPE"){if(signal.li===li){fullScope=signal.scope;inScope=true;signal.expanded=false;continue;}
if(inScope){if((signal.scope.indexOf(fullScope)!==0)||(word_char_re.test(signal.scope.charAt(fullScope.length)))){inScope=false;break;}else{signal.expanded=false;}}}
if(inScope){results.push(signal.visible=false);}else{results.push(void 0);}}
return results;}
generateWave(start,end,windowWidth){var html,j,len,len1,nameLen,newEnd,newStart,pixelsPerCycle,ref,textRegion,v,width;if(windowWidth){this.windowWidth=windowWidth;}
html="";this.currentStart=newStart=start!=null?start:this.waveData.getStartCycle();this.currentEnd=newEnd=end!=null?end:this.waveData.getEndViewerCycle();width=newEnd-newStart;nameLen=10;ref=this.rows;for(j=0,len1=ref.length;j<len1;j++){v=ref[j];if(v.type==="wire"){len=v.notFullName.length;if(len>nameLen){nameLen=len;}}}
if(nameLen>35){nameLen=35;}
textRegion=nameLen*8;textRegion=Math.min(textRegion,this.windowWidth/3);this.textRegionWidth=textRegion+this.VALUE_REGION_WIDTH;this.waveRegion=this.windowWidth-this.textRegionWidth;if(this.waveRegion<0){this.waveRegion=0;}
pixelsPerCycle=this.waveRegion/width;this.cyclesPerPixel=width/this.waveRegion;this.numVisible=this.getNumVisible();this.svgHeight=this.ELEMENT_HEIGHT*this.numVisible;html+=`<!-- Begin Ruler -->
<div data-WaveformViewer-ruler="data-WaveformViewer-ruler"><svg
    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
    id="${this.path}-svg-ruler" width="${this.windowWidth}" height="${this.ELEMENT_HEIGHT}">
  <defs>
    <g id="b"><rect width="1" height="${this.ELEMENT_HEIGHT}" style="fill:rgb(0,0,0);stroke-width:0"></rect></g>
    <g id="gray"><rect width="1" height="${this.ELEMENT_HEIGHT}" style="fill:dimGray;stroke-width:0"></rect></g>
    <g id="majorMark"><line x1="0" y1="18" x2="0" y2="0" style="stroke:honeydew; stroke-width:1"/></g>
    <g id="minorMark"><line x1="0" y1="18" x2="0" y2="12" style="stroke:honeydew; stroke-width:1"/></g>
    <g id="rulerLine"><line x1="0" y1="18" x2="1" y2="18" style="stroke:honeydew; stroke-width:1"/></g>
  </defs>`;if(this.waveRegion>0){html+=this.createRuler(pixelsPerCycle);}
html+=`  <g class="verticalLineRuler" style="display:block; stroke-width:1" transform="translate(0,0)"></g>
  <g class="vizCursorRuler" style="display:block; stroke-width:1" transform="translate(0,0)"></g>
</svg></div>
<div id="${this.path}-waveform-body-wrapper", data-WaveformViewer-body-wrapper="data-WaveformViewer-body-wrapper">
<svg
  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
  width="${this.windowWidth}" height="${this.svgHeight}">
<defs>
  <g id="b"><rect width="1" height="${this.ELEMENT_HEIGHT}" style="fill:rgb(0,0,0);stroke-width:0"></rect></g>
  <g id="gray"><rect width="1" height="${this.ELEMENT_HEIGHT}" style="fill:dimGray;stroke-width:0"></rect></g>
  <g id="zero"><line x1="0" y1="18" x2="1" y2="18" style="stroke:turquoise; stroke-width:1"/></g>
  <g id="one"><line x1="0" y1="2" x2="1" y2="2" style="stroke:lime; stroke-width:2"/></g>
  <g id="z"><line x1="0" y1="10" x2="1" y2="10" style="stroke:Peru; stroke-width:1"/></g>
  <g id="x">
    <rect y="2" width="1" height="16" style="fill:crimson;stroke-width:0; opacity:0.5"/>
      <line x1="0" y1="2" x2="1" y2="2" style="stroke:crimson; stroke-width:1"/>
      <line x1="0" y1="18" x2="1" y2="18" style="stroke:crimson; stroke-width:1"/>
    </rect>
  </g>
  <g id="BlurValidBus"><rect x="0" y="2" width="1" height="18.02" style="fill:bisque"/></g>
  <g id="BlurValidBit"><rect x="0" y="2" width="1" height="18.02" style="fill:turquoise"/></g>
  <g id="BlurUnkValidity"><rect x="0" y="2" width="1" height="18.02" style="fill:crimson"/></g>
  <g id="BlurInvalid"><rect x="0" y="2" width="1" height="18.02" style="fill:gray"/></g>
  <g id="xEdge"><line x1="0" y1="18" x2="0" y2="2" style="stroke:crimson; stroke-width:1"/></g>
  <g id="risingEdge"><line x1="0" y1="18" x2="0" y2="2" style="stroke:lime; stroke-width:1"/></g>
  <g id="zeroToZ"><line x1="0" y1="18" x2="0" y2="10" style="stroke:lime; stroke-width:1"/></g>
  <g id="ZToOne"><line x1="0" y1="10" x2="0" y2="2" style="stroke:lime; stroke-width:1"/></g>
  <g id="fallingEdge"><line x1="0" y1="2" x2="0" y2="18" style="stroke:turquoise; stroke-width:1"/></g>
  <g id="oneToZ"><line x1="0" y1="2" x2="0" y2="10" style="stroke:turquoise; stroke-width:1"/></g>
  <g id="ZToZero"><line x1="0" y1="10" x2="0" y2="18" style="stroke:turquoise; stroke-width:1"/></g>
  <g id="bus">
    <line x1="0" y1="18" x2="1" y2="18" style="stroke:bisque; stroke-width:1"/>
    <line x1="0" y1="2" x2="1" y2="2" style="stroke:bisque; stroke-width:1"/>
  </g>
  <g id="xbus">
    <line x1="0" y1="18" x2="1" y2="18" style="stroke:crimson; stroke-width:1"/>
    <line x1="0" y1="2" x2="1" y2="2" style="stroke:crimson; stroke-width:1"/>
  </g>
  <g id="busStart">
    <line x1="0" y1="10" x2="1.5" y2="2" style="stroke:bisque; stroke-width:1"/>
    <line x1="0" y1="10" x2="1.5" y2="18" style="stroke:bisque; stroke-width:1"/>
  </g>
  <g id="xbusStart">
    <line x1="0" y1="10" x2="1.5" y2="2" style="stroke:crimson; stroke-width:1"/>
    <line x1="0" y1="10" x2="1.5" y2="18" style="stroke:crimson; stroke-width:1"/>
  </g>
  <g id="busEnd">
    <line x1="0" y1="18" x2="1.5" y2="10" style="stroke:bisque; stroke-width:1"/>
    <line x1="0" y1="2" x2="1.5" y2="10" style="stroke:bisque; stroke-width:1"/>
  </g>
  <g id="xbusEnd">
    <line x1="0" y1="18" x2="1.5" y2="10" style="stroke:crimson; stroke-width:1"/>
    <line x1="0" y1="2" x2="1.5" y2="10" style="stroke:crimson; stroke-width:1"/>
  </g>
  <g id="busChange">
    <line x1="0" y1="18" x2="3" y2="2" style="stroke:bisque; stroke-width:1"/>
    <line x1="0" y1="2" x2="3" y2="18" style="stroke:bisque; stroke-width:1"/>
  </g>
  <g id="DCZero"><line x1="0" y1="18" x2="1" y2="18" style="stroke:gray; stroke-width:1"></line></g>
  <g id="DCOne"><line x1="0" y1="2" x2="1" y2="2" style="stroke:gray;stroke-width:2"></line></g>
  <g id="UnkDCZero"><line x1="0" y1="18" x2="1" y2="18" style="stroke:crimson; stroke-width:1"></line></g>
  <g id="UnkDCOne"><line x1="0" y1="2" x2="1" y2="2" style="stroke:crimson;stroke-width:2"></line></g>
  <g id="DCBitEdge"><line x1="0" y1="2" x2="0" y2="18" style="stroke:gray;stroke-width:1"></line></g>
  <g id="DCOneToZ"><line x1="0" y1="2" x2="0" y2="10" style="stroke:Peru; stroke-width:1"></line></g>
  <g id="DCZeroToZ"><line x1="0" y1="18" x2="0" y2="10" style="stroke:Peru; stroke-width:1"></line></g>
  <g id="ZToDCOne"><line x1="0" y1="10" x2="0" y2="2" style="stroke:gray; stroke-width:1"></line></g>
  <g id="ZToDCZero"><line x1="0" y1="10" x2="0" y2="18" style="stroke:gray; stroke-width:1"></line></g>
  <g id="DCBusStart">
    <line x1="0" y1="10" x2="1.5" y2="2" style="stroke:gray;stroke-width:1"></line>
    <line x1="0" y1="10" x2="1.5" y2="18" style="stroke:gray;stroke-width:1"></line>
  </g>
  <g id="DCBus">
    <line x1="0" y1="2" x2="1" y2="2" style="stroke:gray;stroke-width:1"></line>
    <line x1="0" y1="18" x2="1" y2="18" style="stroke:gray;stroke-width:1"></line>
  </g>
  <g id="DCBusEnd">
    <line x1="0" y1="18" x2="1.5" y2="10" style="stroke:gray; stroke-width:1"></line>
    <line x1="0" y1="2" x2="1.5" y2="10" style="stroke:gray; stroke-width:1"></line>
  </g>
</defs>`;if(this.waveRegion>0){html+=this.createWaves(textRegion,pixelsPerCycle);}
html+='<g class="verticalLine" style="display:block;" transform="translate(0,0)"></g>';html+='<g class="vizCursor" style="display:block;" transform="translate(0,0)"></g>';html+="</div></svg>";this.svg=html;return html;}
getNumVisible(){var j,len1,ref,sum,v;sum=0;ref=this.rows;for(j=0,len1=ref.length;j<len1;j++){v=ref[j];if(v.visible){sum++;}}
return sum;}
createRuler(pixelsPerCycle){var end,interval,intervalSpace,next,offset,out,position,roundOffset,roundStart,smallInterval,start,tempStart,tick;start=this.currentStart;end=this.currentEnd;next=start;interval=this.getIntervalSize(start,end);smallInterval=interval/10;offset=0;out="";out+='<g class="ruler" transform="translate(0,0)">';out+='<use xlink:href="#gray" transform="scale('+this.windowWidth+',1)"/>';out+='<g transform="translate('+this.textRegionWidth+',0)">';out+='<use xlink:href="#rulerLine" transform="scale('+this.waveRegion+',1)"/>';if(start%interval===0){offset=0;out+='<use xlink:href="#majorMark" transform="translate('+offset+')"/>';out+='<text class="time" x="1" y="12">'+this.addCommas(start*this.timescale.number)+"</text>";tempStart=start;}else{if(start%smallInterval===0){offset=0;out+='<use xlink:href="#minorMark" transform="translate('+offset+')"/>';tempStart=start;}else{roundStart=smallInterval*Math.ceil(start/smallInterval);offset=pixelsPerCycle*(roundStart-start);roundOffset=Math.round(offset.toFixed(2));if(roundStart%interval===0){out+=`<use xlink:href="#majorMark" transform="translate(${roundOffset})" />`;if(next<=end){out+=`<text class="time" x="1" y="12" transform="translate(${roundOffset})">
  ${this.addCommas(roundStart*this.timescale.number)}
</text>`;}}else{out+='<use xlink:href="#minorMark" transform="translate('+roundOffset+')"/>';}
tempStart=roundStart;}}
roundStart=tempStart+smallInterval;intervalSpace=pixelsPerCycle*smallInterval;while(true){tick=offset+intervalSpace;position=Math.round(tick.toFixed(2));next=roundStart+smallInterval;if(roundStart%interval===0){out+='<use xlink:href="#majorMark" transform="translate('+position+')"/>';if(next<=end){out+=`<text class="time" x="1" y="12" transform="translate(${position})">
  ${this.addCommas(roundStart*this.timescale.number)}
</text>`;}}else{out+='<use xlink:href="#minorMark" transform="translate('+position+')"/>';}
offset=tick;roundStart=next;if(!(roundStart<=end)){break;}}
return out+"</g></g>";}
createWaves(textRegion,pixelsPerCycle){var count,expand,fullName,index,j,le,len1,li,name,out,ref,sign,sv,tempName,wave;out="";count=0;ref=this.rows;for(j=0,len1=ref.length;j<len1;j++){wave=ref[j];if(!wave.visible){continue;}
name=wave.name;if(wave.type==="SCOPE"){le=wave.li;li=wave.li;if(wave.scope.startsWith(Variable.tlvTopScopeName)&&(wave.scope.length>Variable.tlvTopScopeName.length)){tempName=wave.scope;li=tempName.substring(Variable.tlvTopScopeName.length);le=li.replace(/\[[0-9]+\]/g,"");}
out+=`<g transform="translate(0, ${count*this.ELEMENT_HEIGHT})" logical_entity="${le}" logical_instance="${li}">
  <rect
    class="value scope" width="${this.textRegionWidth-textRegion}" height="${this.ELEMENT_HEIGHT}"
    transform="translate(${textRegion}, 0)"></rect>
  <rect
    class="waveName waveName${count} scope" width="1" height="${this.ELEMENT_HEIGHT}"
    transform="scale(${textRegion}, 1)"></rect>`;if(wave.expanded){expand="waveCollapse";sign=" - ";}else{expand="waveExpand";sign=" + ";}
out+=`<text class="${expand}" x="-4" y="15" text-anchor="start" xml:space="preserve"><title></title>${sign}</text>`;out+='<text class="scope" x="16" y="15" text-anchor="start" xml:space="preserve"><title>';out+=name=wave.name;out+=`</title>${name}</text>`;out+=`<text
  id="value_${count}" class="value" x="${30-4}" y="15" transform="translate(${textRegion})"
  text-anchor="end">
  <title></title>
</text>`;out+=`<g class="wave" transform="translate(${this.textRegionWidth}, 0)">
  <rect class="wavescope" width="${this.windowWidth-this.textRegionWidth}" height="20"></rect>
  <text class="wavescope" x="4" y="15" text-anchor="start" xml:space="preserve">
    <title>${li}</title>
    ${li}
   </text>
 </g>
 </g>`;count++;continue;}
le=wave.name;li=wave.name;if(wave.scope.startsWith(Variable.tlvTopScopeName)){tempName=wave.name.replace(/\[[0-9]+:[0-9]+\]/g,"");li=tempName.substring(tempName.indexOf(Variable.tlvTopScopeName)+Variable.tlvTopScopeName.length);if(li.indexOf("@")>-1){li=li.substring(0,li.indexOf("@"))+li.substring(li.indexOf("$"));}
le=li.replace(/\[[0-9]+\]/g,"");}
out+='<g transform="translate(0,'+count*this.ELEMENT_HEIGHT+')" logical_entity="'+le+'" logical_instance="'+li+'">';out+=`<rect
  class="value" width="${this.textRegionWidth-textRegion}" height="${this.ELEMENT_HEIGHT}"
  transform="translate(${textRegion},0)"></rect>
<rect
  class="waveName waveName${count}" width="1" height="${this.ELEMENT_HEIGHT}"
  transform="scale(${textRegion},1)"></rect>`;out+=`<text class="name name${count}" x="${textRegion}" y="15" text-anchor="end" xml:space="preserve"><title>`;fullName="";name="";if((wave.cycle!=null)&&wave.cycle!==void 0){index=wave.notFullName.lastIndexOf("$");name=`@${wave.cycle}`+wave.notFullName.substring(index);if(wave.name.startsWith(Variable.tlvTopScopeName)){fullName=wave.name.substring(Variable.tlvTopScopeName.length,index)+name;}else{fullName=wave.name.substring(0,index)+name;}}else{name=wave.notFullName;fullName=wave.name;}
out+=fullName+`</title>${name}</text>`;out+=`<text
  id="value_${count}" class="value" x="${30-4}" y="15" transform="translate(${textRegion})"
  text-anchor="end">
  <title></title>
</text>`;out+='<g class="wave" transform="translate('+this.textRegionWidth+',0)">';out+='<rect width="'+(this.windowWidth-this.textRegionWidth)+'" height="20"></rect>';if(wave.type!=="SCOPE"){sv=new SignalValue(wave.signal,this.currentStart);}
if(wave.type==="real"){out+=this.processSignal(sv,pixelsPerCycle,this.drawBusSignal);}else{if(wave.width===1||wave.width==="1"){out+=this.processSignal(sv,pixelsPerCycle,this.drawBitSignal);}else{if(wave.width!==0&&wave.width!=="0"){out+=this.processSignal(sv,pixelsPerCycle,this.drawBusSignal);}}}
out+='</g></g>';count++;}
return out;}
processSignal(sv,pixelsPerCycle,drawFn){var blur,doDraw,done,endCycle,endPix,lastEndPix,offEnd,offStart,offWave,out,startPix,thisBlur;out="";lastEndPix=0;startPix=0;blur=false;done=false;while(true){endCycle=sv.getNextTransitionCycle();offWave=typeof endCycle==="undefined";offEnd=offWave||endCycle>this.currentEnd;if(offEnd){endCycle=this.currentEnd+1;}
endPix=Math.round(pixelsPerCycle*(endCycle-this.currentStart));done=offWave||endPix>=this.waveRegion;if(endPix>lastEndPix){doDraw=endPix-lastEndPix>=1.5;thisBlur=doDraw?false:sv.isValid()?(drawFn===this.drawBusSignal?"ValidBus":"ValidBit"):typeof sv.isValid()==="undefined"?"UnkValidity":"Invalid";if(blur&&(blur!==thisBlur)){out+=this._drawBlur(blur,startPix,lastEndPix);startPix=lastEndPix;}
blur=thisBlur;if(doDraw){offStart=sv.getTransitionCycle()<sv.getCycle();out+=drawFn(sv,startPix,endPix,offStart,offEnd);startPix=endPix;}
lastEndPix=endPix;}
if(done){out+=this._drawBlur(blur,startPix,endPix);break;}
sv.goToNextTransition();}
return out;}
_drawBlur(blur,startPix,endPix){Utils.assert(Number.isInteger(endPix-startPix));return `<use
  xlink:href="#Blur${blur}"
  transform="translate(${startPix},0.49) scale(${endPix-startPix},1)" />`;}
drawBitSignal(sv,startPix,endPix,offStart,offEnd){var dif,group,out;dif=endPix-startPix;out=`<use
  xlink:href="#${this.getLastValue(sv.getLegacyValue(),sv.isValid())}" transform="translate(${startPix}, 0.5)
  scale(${dif}, 1)" />`;if(!offEnd){group=this.getEdge(sv.getValue(),sv.isValid(),sv.getNextTransitionValueStr(),sv.isNextTransitionValid());if(group){out+=`<use xlink:href=\"#${group}\" transform=\"translate(${endPix}, 0.5)\"/>`;}}
return out;}
busID(allX,valid){if(allX||typeof valid==="undefined"){return "#xbus";}else if(valid){return "#bus";}else{return "#DCBus";}}
drawBusSignal(sv,startPix,endPix,offStart,offEnd){var allX,midDist,out,temp;if(offStart){startPix-=1.5;}
midDist=endPix-startPix-3;if(offEnd){midDist=this.waveRegion-startPix-1.5;}
out="";[allX,temp]=this.getBusIntervalText(sv,sv.getLegacyValue(),midDist,startPix);if(!offStart){out+=`<use
  xlink:href="${this.busID(allX,sv.isValid())}Start"
  transform="translate(${startPix}, 0.5)" />`;}
if(midDist>0){out+=`<use
  xlink:href="${this.busID(allX,sv.isValid())}"
  transform="translate(${startPix+1.5}, 0.5) scale(${midDist},1)" />`;out+=temp;}
if(!offEnd){out+=`<use xlink:href=\"${this.busID(allX,sv.isValid())}End\"`+` transform=\"translate(${endPix-1.5}, 0.5)\" />`;}
return out;}
getLastValue(value,valid){switch(value){case 0:case "0":return "zero";case 1:case "1":return "one";case "Z":return "z";case "W0":if(valid===false){return "DCZero";}else{return "UnkDCZero";}
case "W1":if(valid===false){return "DCOne";}else{return "UnkDCOne";}
default:return "x";}}
getEdge(last,lastValid,next,nextValid){if(next===last){return "";}else{if(next==="X"||typeof nextValid==="undefined"){return "xEdge";}
switch(last){case "0":return this.getEdgeFromZero(next,nextValid);case "1":return this.getEdgeFromOne(next,nextValid);case "Z":return this.getEdgeFromZ(next,nextValid);case "X":return "xEdge";case "W0":return this.getEdgeFromDCZero(next,nextValid);case "W1":return this.getEdgeFromDCOne(next,nextValid);default:return "";}}}
getEdgeFromZero(next,nextValid){switch(next){case "1":return(nextValid?"risingEdge":"DCBitEdge");case "Z":return "zeroToZ";}
return "";}
getEdgeFromOne(next,nextValid){switch(next){case "0":return(nextValid?"fallingEdge":"DCBitEdge");case "Z":return "oneToZero";}
return "";}
getEdgeFromZ(next,nextValid){switch(next){case "0":return(nextValid?"ZToZero":"ZToDCZero");case "1":return(nextValid?"ZToOne":"ZToDCOne");}
return "";}
getEdgeFromDCZero(next,nextValid){switch(next){case "1":return(nextValid?"risingEdge":"DCBitEdge");case "Z":return "DCZeroToZ";}
return "";}
getEdgeFromDCOne(next,nextValid){switch(next){case "0":return(nextValid?"fallingEdge":"DCBitEdge");case "Z":return "DCOneToZ";}
return "";}
getIntervalSize(start,end){var f,k,numPixelWidth,width;width=end-start;numPixelWidth=this.addCommas(end*this.timescale.number).length*8;f=width/(this.waveRegion/Math.max(numPixelWidth,100));k=1;while(f>50){k*=10;f/=10;}
if(f<=10){return 10*k;}else{if(f<=20){return 20*k;}else{if(f<=50){return 50*k;}}}}
getBusIntervalText(sv,lastValue,dif,roundLoc){var allX,j,len1,ref,style,temp,text,val,valid,x;valid=sv.isValid();val=sv.signal.type!=="real"?this.getBusIntervalValue(sv.getValue(),sv.signal.width):sv.getValue();text=this.shortenText(val,dif);allX=true;ref=val.split("");for(j=0,len1=ref.length;j<len1;j++){x=ref[j];if(x!=="X"&&x!=="x"&&x!=="_"){allX=false;}}
if(text){style=allX||typeof valid==="undefined"?'style="fill:crimson" ':valid?"":'style="fill:gray" ';temp=`<text class="busData" x="0" y="14" ${style} transform="translate(${roundLoc+2.5})">
  <title>${val}</title>
  ${text}
</text>`;return[allX,temp];}
return[false,""];}
getBusIntervalValue(val,width){if(this.radix==="hex"){return valToHex(val,width);}else{return valToBin(val,width);}}
shortenText(val,dif){var space;if(dif>0){space=Math.floor(dif/8);}else{space=0;}
if(val.length>space){if(space===0){return "";}else{if(space===1){return "*";}else{return "*"+val.substring(val.length-space+1);}}}
return val;}
addCommas(num){return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",");}};WaveformGenerator.prototype.pane=null;WaveformGenerator.prototype.path="";WaveformGenerator.prototype.windowWidth=0;WaveformGenerator.prototype.waveRegion=0;WaveformGenerator.prototype.ELEMENT_HEIGHT=20;WaveformGenerator.prototype.CHARACTER_WIDTH=8;WaveformGenerator.prototype.VALUE_REGION_WIDTH=30;WaveformGenerator.prototype.CHARS_IN_VALUE_REGION=3;WaveformGenerator.prototype.isChrome=false;WaveformGenerator.prototype.isFirefox=false;WaveformGenerator.prototype.radix="hex";WaveformGenerator.prototype.currentStart=0;WaveformGenerator.prototype.currentEnd=0;WaveformGenerator.prototype.textRegionWidth=0;WaveformGenerator.prototype.cyclesPerPixel=0;WaveformGenerator.prototype.svgHeight=0;WaveformGenerator.prototype.loading=false;WaveformGenerator.prototype.waveData=null;WaveformGenerator.prototype.timescale=null;WaveformGenerator.prototype.svg="";WaveformGenerator.prototype.lineCycle=0;WaveformGenerator.prototype.rows=null;WaveformGenerator.prototype.numVisible=0;return WaveformGenerator;}).call(this);valToHex=function(val,width){var bytes,c,j,maxBytes,out,ref,temp;val=""+val;out=valToHexChunks(val);out=valToHexRemainder(val,out);if(width>val.length){temp=null;if(val[0]==="z"){temp="Z";}else{if(val[0]==="x"){temp="X";}}
if(temp){maxBytes=Math.ceil(width/4);bytes=Math.ceil(val.length/4);for(c=j=0,ref=maxBytes-bytes;(0<=ref?j<ref:j>ref);c=0<=ref?++j:--j){out=appendHexChunk(out,temp);}}}
return out.split("").reverse().join("");};valToHexChunks=function(val){var arr,chunk,hex,i,index,j,len1,out;out="";arr=[];index=val.length-4;while(index>=0){arr.push(index);index-=4;}
for(j=0,len1=arr.length;j<len1;j++){i=arr[j];chunk=val.substr(i,4);if(chunk==="xxxx"){hex="X";}else{if(chunk==="zzzz"){hex="Z";}else{if(chunk.indexOf("x")>=0){hex="x";}else{if(chunk.indexOf("z")>=0){hex="z";}else{hex=parseInt(chunk,2).toString(16);}}}}
out=appendHexChunk(out,hex);}
return out;};valToHexRemainder=function(val,front){var hex,small;if(val.length%4){small=val.substr(0,val.length%4);if(small==="x"||small==="xx"||small==="xxx"){hex="X";}else{if(small==="z"||small==="zz"||small==="zzz"){hex="Z";}else{if(small.indexOf("x")>=0){hex="x";}else{if(small.indexOf("z")>=0){hex="z";}else{hex=parseInt(small,2);}}}}
front=appendHexChunk(front,hex);}
return front;};valToBin=function(val,width){var c,j,more,na,ref,space;if(width>val.length){na=null;if(val[0]==="z"){na="z";}else{if(val[0]==="x"){na="x";}}
if(na){more="";space=width-val.length;for(c=j=0,ref=space;(0<=ref?j<ref:j>ref);c=0<=ref?++j:--j){more+=na;}
return more+val;}}
return val;};appendHexChunk=function(large,next){if(large.length!==4&&((large.length+1)%5)){return large+=next;}
return large+="_"+next;};isNumber=function(num){return!isNaN(num-0)&&(typeof a!=="undefined"&&a!==null)&&a!==false&&a!=="";};define(function(require,exports,module){$=require("jquery");Utils=require("Utils");SignalValue=require("VCD/SignalValue");Variable=require("VCD/Variable");$.extend(WaveformGenerator.prototype,module.config());return WaveformGenerator;});}).call(this);